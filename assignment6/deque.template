/// g++ -g -Wall -o deque main.cpp

//postcondition: empty deque has been created
template <typename T>
deque<T>::deque(): count(), first(), last()
{
}

// postcondition: all resouroces allocated to the deque
//                have been deallocated
template <typename T>
deque<T>::~deque()
{
	list_clear(first);
}

// postcondition: newly created deque is a copy of dq
template <typename T>
deque<T>::deque(const deque<T>& dq)
{
	list_copy(dq.first, first, last);
	count = dq.count;
}

// postcondition: current deque is a copy of dq 
template <typename T>
deque<T>& deque<T>::operator = (const deque<T>& dq)
{
	list_clear(first);
	
	list_copy(dq.first, first, last);
	count = dq.count;
}


//precondition: deque is not empty
// postcondition: reference to element at front of deque
//                            has been returned
template <typename T>
T& deque<T>::front()
{
	assert(!empty());
	return first->data();
}

// precondition: deque is not empty
// postcondition: copy of element at front of deque
//                            has been returned
template <typename T>
T deque<T>::front() const
{
	assert(!empty());
	return first->data();
}

// precondition: deque is not empty
// postcondition: reference to element at front of deque
//                            has been returned
template <typename T>
T& deque<T>::back()
{
	assert(!empty());
	return last->data();
}

// precondition: deque is not empty
// postcondition: copy of element at back of deque
//                            has been returned
template <typename T>
T deque<T>::back() const
{
	assert(!empty());
	return last->data();
}

// postcondition: entry has been inserted at the front
//                            of the deque
template <typename T>
void deque<T>::push_front (const T& entry)
{
	list_head_insert(first, entry);
	if (size() == 1)
	{
		last = first;
	}
	
}

// postcondition: entry has been inserted at the back
//                            of the deque
template <typename T>
void deque<T>::push_back (const T& entry)
{
	if (empty())
	{
		list_head_insert(first, entry);
		last = first;
	}
	else
	{
		list_insert(last, entry);
		last = last->link();
	}
}

// precondition: deque is not empty
// postcondition: element at front of deque has been removed
template <typename T>
void deque<T>::pop_front()
{
	if (first == last)
	{
		last = NULL;
	}
	
	list_head_remove(first);
}

// precondition: deque is not empty
// postcondition: element at back of deque has been removed
template <typename T>
void deque<T>::pop_back()
{
	node<T>* tmp = first;
	if (first == last)
	{
		last = NULL;
		list_head_remove(first);
	}
	else
	{
		while (tmp->link() != last && tmp != NULL)
		{
			tmp = tmp->link();
		}
		last = tmp;
		list_remove(tmp);
	}
}

// postcondition: number of elements in deque has been returned
template <typename T>
typename deque<T>::size_type deque<T>::size() const
{
	return list_length(first);
}

// postcondition: whether deque is empty has been returned
template <typename T>
bool deque<T>::empty() const
{
	return size()==0;
}

// postcondition: returned whether 2 deques are equal - equal is defined
//                            as the deques have the same number of elements &
//                            corresponding elements are equal
template <typename U>
bool operator == (const deque<U>& dq1, const deque<U>& dq2)
{
	if (dq1.size() != dq2.size())
		return false;
	
	const_node_iterator<U> j(dq2.first);
	for (const_node_iterator<U> i(dq1.first); i != NULL; i++)
	{
		if (*i != *j)
			return false;
		j++;
	}
	
	return true;
}

// postcondition: dq has been display from front to rear on out
template <typename U>
std::ostream& operator<< (std::ostream& out, const deque<U>& dq)
{
	//out << "deque: " << std::endl;
	for (const_node_iterator<U> i(dq.first); i != NULL; i++)
	{
		out << *i;
		if (i != dq.last)
		{
			out << ", ";
		}
		
	}
	return out;
}





