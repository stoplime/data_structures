
// precondition: element at index has children
// postcondition: index of the larger child has been returned
//                if there is only 1 child - index of that child has been returned
template <typename T>
unsigned int heap<T>::max_child (unsigned int index) const
{
	unsigned int left_child(index*2+1);
	unsigned int right_child(index*2+2);
	assert(v.size() > left_child);
	if (v.size() > right_child)
	{
		//has two children
		if (v[left_child] > v[right_child])
		{
			return left_child;
		}
		else
		{
			return right_child;
		}
	}
	else
	{
		//has only left child
		return left_child;
	}
}

// postcondition: empty heap has been created
template <typename T>
heap<T>::heap()
: v()
{
}


// postcondition: number of elements in a heap has been returned
template <typename T>
unsigned int heap<T>::size() const
{
	return v.size();
}


// postcondtion: returned whether the heap is empty
template <typename T>
bool heap<T>::is_empty() const
{
	if (size() == 0)
	{
		return true;
	}
	return false;
}


// postcondition: item has been added
template <typename T>
void heap<T>::insert (const T& item)
{
	v.push_back(item);
	//the class invariance
	unsigned int child_index = size()-1;
	unsigned int parent_index = (child_index-1)/2;
	if (parent_index < 0)
	{
		return;
	}
	while (child_index > 0)
	{
		if (v[parent_index] < v[child_index])
		{
			T tmp = v[parent_index];
			v[parent_index] = v[child_index];
			v[child_index] = tmp;
			child_index = parent_index;
			parent_index = (child_index-1)/2;
		}
		else
		{
			break;
		}
		
	}
	
}


// precondition: heap is not empty
// postcondition: largest item has been removed from the heap
template <typename T>
void heap<T>::remove()
{
	assert(!is_empty());
	if (size() == 1)
	{
		v.erase(v.begin());
		return;
	}
	
	v[0] = v[v.size()-1];
	v.erase(v.begin()+v.size()-1);
	
	unsigned int parent_index = 0;
	unsigned int child_index = 0; 
	while (size() > parent_index*2+1)
	{
		child_index = max_child(parent_index);
		if (v[child_index] > v[parent_index])
		{
			T tmp = v[parent_index];
			v[parent_index] = v[child_index];
			v[child_index] = tmp;
			parent_index = child_index;
		}
		else
		{
			break;
		}
		
	}
}


// precondition: heap is not empty
// postcondition: copy of largest element in the heap has been returned
template <typename T>
T heap<T>::max() const
{
	assert(!is_empty());
	return v[0];
}


// precondition: heap is not empty
// postcondition: access to largest element in the heap has been returned
template <typename T>
T& heap<T>::max()
{
	assert(!is_empty());
	return v[0];
}


