


namespace main_savitch_12B
{
	template <class RecordType>
	table<RecordType>::table( )
	: data()
	{
		for (int i = 0; i < TABLE_SIZE; i++)
		{
			data[i] = new std::list<RecordType>;
		}
		
	}
	
	template <class RecordType>
	table<RecordType>::table(const table& source)
	{
		for (int i = 0; i < TABLE_SIZE; i++)
		{
			data[i] = source[i];
		}
	}
	
	template <class RecordType>
	table<RecordType>::~table( )
	{
		std::list<RecordType>* tmp;
		for (int i = 0; i < TABLE_SIZE; i++)
		{
			tmp = data[i];
			delete tmp;
		}
		//delete[] data;
	}
	
	template <class RecordType>
	void table<RecordType>::insert(const RecordType& entry)
	{
		if (entry.key < 0)
		{
			return;
		}
		bool found;
		RecordType result;
		find(entry.key, found, result);
		if (!found)
		{
			data[hash(entry.key)]->push_back(entry);
		}
	}
	
	template <class RecordType>
	void table<RecordType>::remove(int key)
	{
		if (key < 0)
		{
			return;
		}
		bool found;
		RecordType result;
		find(key, found, result);
		if (found)
		{
			for (typename std::list<RecordType>::iterator it = data[hash(key)]->begin(); it != data[hash(key)]->end(); it++)
			{
				if ((*it).key == key)
				{
					data[hash(key)]->erase(it);
					return;
				}
			}
		}
	}
	
	template <class RecordType>
	void table<RecordType>::operator =(const table& source)
	{
		for (int i = 0; i < TABLE_SIZE; i++)
		{
			data[i] = source[i];
		}
	}
	
	template <class RecordType>
	void table<RecordType>::find(int key, bool& found, RecordType& result) const
	{
		found = false;
		int index = hash(key);
		if (!is_present(key))
		{
			return;
		}
		
		for (typename std::list<RecordType>::iterator it = data[index]->begin(); it != data[index]->end(); it++)
		{
			if ((*it).key == key)
			{
				found = true;
				result = *it;
				return;
			}
		}
	}
	
	template <class RecordType>
	bool table<RecordType>::is_present(int key) const
	{
		int index = hash(key);
		if (!data[index]->empty())
		{
			for (typename std::list<RecordType>::iterator it=data[index]->begin(); it != data[index]->end(); ++it)
			{
				if ((*it).key == key)
				{
					return true;
				}
			}
		}
		return false;
	}
	
	template <class RecordType>
	std::size_t table<RecordType>::hash(int key) const
	{
		return (key % TABLE_SIZE);
	}
	
}
